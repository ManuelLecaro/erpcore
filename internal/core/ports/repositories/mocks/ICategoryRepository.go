// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ManuelLecaro/erpcore/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ICategoryRepository is an autogenerated mock type for the ICategoryRepository type
type ICategoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, category
func (_m *ICategoryRepository) Create(ctx context.Context, category domain.Category) (*domain.Category, error) {
	ret := _m.Called(ctx, category)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, domain.Category) *domain.Category); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: ctx, categories
func (_m *ICategoryRepository) CreateMany(ctx context.Context, categories []domain.Category) ([]domain.Category, error) {
	ret := _m.Called(ctx, categories)

	var r0 []domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Category) []domain.Category); ok {
		r0 = rf(ctx, categories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []domain.Category) error); ok {
		r1 = rf(ctx, categories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ICategoryRepository) GetByID(ctx context.Context, id string) (*domain.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICategoryRepository creates a new instance of ICategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICategoryRepository(t mockConstructorTestingTNewICategoryRepository) *ICategoryRepository {
	mock := &ICategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
